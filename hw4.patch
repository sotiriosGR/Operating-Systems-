diff --git a/include/minix/callnr.h b/include/minix/callnr.h
index 6f145cf..8effa96 100644
--- a/include/minix/callnr.h
+++ b/include/minix/callnr.h
@@ -65,7 +65,7 @@
 #define SETGROUPS_O	  66
 #define GETMCONTEXT       67
 #define SETMCONTEXT       68
-
+#define NEWCALL           69
 /* Posix signal handling. */
 #define SIGACTION	  71
 #define SIGSUSPEND	  72
diff --git a/include/unistd.h b/include/unistd.h
index 55a146b..3365f7f 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -407,6 +407,7 @@ int	 setrgid(gid_t);
 int	 setruid(uid_t);
 void	 setusershell(void);
 void	 strmode(mode_t, char *);
+int      newcall(int);
 #ifndef __STRSIGNAL_DECLARED
 #define __STRSIGNAL_DECLARED
 /* backwards-compatibility; also in string.h */
diff --git a/kernel/system/do_fork.c b/kernel/system/do_fork.c
index f309270..4a0800b 100644
--- a/kernel/system/do_fork.c
+++ b/kernel/system/do_fork.c
@@ -122,7 +122,7 @@ int do_fork(struct proc * caller, message * m_ptr)
   rpc->p_seg.p_ttbr = 0;
   rpc->p_seg.p_ttbr_v = NULL;
 #endif
-
+printf("process forked\n");
   return OK;
 }
 
diff --git a/lib/libc/sys-minix/Makefile.inc b/lib/libc/sys-minix/Makefile.inc
index 6f52097..c3d7c6f 100644
--- a/lib/libc/sys-minix/Makefile.inc
+++ b/lib/libc/sys-minix/Makefile.inc
@@ -16,7 +16,8 @@ SRCS+= 	accept.c access.c bind.c brk.c sbrk.c m_closefrom.c getsid.c \
 	vectorio.c shutdown.c sigaction.c sigpending.c sigreturn.c sigsuspend.c\
 	sigprocmask.c socket.c socketpair.c stat.c statvfs.c symlink.c \
 	sync.c syscall.c sysuname.c truncate.c umask.c unlink.c write.c \
-	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c
+	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c \
+	new_call.c
 
 # Minix specific syscalls.
 SRCS+= cprofile.c lseek64.c sprofile.c _mcontext.c
diff --git a/lib/libc/sys-minix/new_call.c b/lib/libc/sys-minix/new_call.c
new file mode 100644
index 0000000..aa59157
--- /dev/null
+++ b/lib/libc/sys-minix/new_call.c
@@ -0,0 +1,11 @@
+#include<stdio.h>
+#include<lib.h>
+
+
+int main(void){
+message m;
+
+_syscall(PM_PROC_NR,NEWCALL,&m);
+
+
+}
diff --git a/lib/libsys/sys_fork.c b/lib/libsys/sys_fork.c
index 811e230..6637514 100644
--- a/lib/libsys/sys_fork.c
+++ b/lib/libsys/sys_fork.c
@@ -17,6 +17,9 @@ vir_bytes *msgaddr;
   m.PR_FORK_FLAGS = flags;
   r = _kernel_call(SYS_FORK, &m);
   *child_endpoint = m.PR_ENDPT;
-  *msgaddr = (vir_bytes) m.PR_FORK_MSGADDR;
-  return r;
+  
+ *msgaddr = (vir_bytes) m.PR_FORK_MSGADDR;
+
+ return r;
+ 
 }
diff --git a/servers/pm/Makefile b/servers/pm/Makefile
index 9065432..3e4ca85 100644
--- a/servers/pm/Makefile
+++ b/servers/pm/Makefile
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c break.c exec.c time.c alarm.c \
 	signal.c utility.c table.c getset.c misc.c \
-	profile.c schedule.c
+	profile.c schedule.c mynewcall.c
 
 .if ${USE_MCONTEXT} != "no"
 SRCS+= mcontext.c
diff --git a/servers/pm/mynewcall.c b/servers/pm/mynewcall.c
new file mode 100644
index 0000000..065289d
--- /dev/null
+++ b/servers/pm/mynewcall.c
@@ -0,0 +1,24 @@
+#include<stdio.h>
+#include<lib.h>
+#include"mproc.h"
+#include"proto.h"
+
+int  do_newcall(){
+struct mproc*mp;
+int i, count=0, usertime=0, systime=0;
+
+for(i=0;i<NR_PROCS;i++){
+mp=&mproc[i];
+if(mp->mp_flags&IN_USE){
+count++;
+usertime+=mp->mp_child_utime;
+systime+=mp->mp_child_stime;
+}
+}
+
+printf("processes -> %d\n",count);
+printf("user time -> %d\n",usertime);
+printf("system time -> %d\n",systime);
+
+return;
+}
diff --git a/servers/pm/proto.h b/servers/pm/proto.h
index 00646d3..dd8f60a 100644
--- a/servers/pm/proto.h
+++ b/servers/pm/proto.h
@@ -103,3 +103,4 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+int do_newcall(void);
diff --git a/servers/pm/table.c b/servers/pm/table.c
index 5051cec..7f4c4ea 100644
--- a/servers/pm/table.c
+++ b/servers/pm/table.c
@@ -80,7 +80,7 @@ int (*call_vec[])(void) = {
 	do_set, 	/* 66 = setgroups */
 	do_getmcontext,	/* 67 = getmcontext */
 	do_setmcontext,	/* 68 = setmcontext */
-	no_sys,		/* 69 = unused	*/
+        do_newcall,     /* 69  = newcall */ 
 	no_sys,		/* 70 = unused	*/
 	do_sigaction,	/* 71 = sigaction   */
 	do_sigsuspend,	/* 72 = sigsuspend  */
diff --git a/servers/vfs/open.c b/servers/vfs/open.c
index fc72695..66ff98b 100644
--- a/servers/vfs/open.c
+++ b/servers/vfs/open.c
@@ -608,7 +608,7 @@ int do_mkdir()
 	r = req_mkdir(vp->v_fs_e, vp->v_inode_nr, fullpath, fp->fp_effuid,
 		      fp->fp_effgid, bits);
   }
-
+  printf("newdir: %s %o", fullpath, dirmode); 
   unlock_vnode(vp);
   unlock_vmnt(vmp);
   put_vnode(vp);
